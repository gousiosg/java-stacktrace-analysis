\documentclass[conference]{IEEEtran}

\usepackage[pdftex]{graphicx}
\usepackage[cmex10]{amsmath}
\usepackage{algorithmic}
\usepackage{caption}
\usepackage[font=footnotesize]{subfig}
\usepackage{url}
\usepackage{balance}

\begin{document}
\title{An exceptional hell}

\author{\IEEEauthorblockN{Roberta Coelho\IEEEauthorrefmark{1}, Arie van Deursen\IEEEauthorrefmark{2}, Georgios Gousios\IEEEauthorrefmark{2}, Lucas Mariano\IEEEauthorrefmark{1}}
\IEEEauthorblockA{\IEEEauthorrefmark{1}Federal University of Rio Grande do Norte\\
Natal, Brazil\\
Email: \texttt{{a.vandeursen, gousiosg}@tudelft.nl}}
\IEEEauthorblockA{\IEEEauthorrefmark{2}Delft University of Technology\\
Delft, The Netherlands\\
Email: \texttt{{a.vandeursen, gousiosg}@tudelft.nl}}
}

% make the title area
\maketitle


\begin{abstract}

Mobile apps are becoming more and more popular. The number of mobile apps is
astonishingly increasing in a daily rate, as well as the number of users
affected by their crashes. Mobile apps as any other app may crash due to several
reasons: lost of network connection, a sensor which is not working properly, a
reused library throwing exceptions, fault on the underling platform,
compatibility issues between apps and the platform, or even  defects on the
application itself. Yet, no study has investigated the extent and main causes of
such crashes. This paper reports a repository mining study aiming at these
issues. In this study we analyzed all the open source Android applications
available in GitHub (xxxx applications) and Google code (xxx appplications)
repositories. From this set approximately xxx issues were extracted, from which
xxx issues mentioned at least one exception and xxxx contained at least one
stack trace. Some outcomes of the study shows that almost x\% of all reported
crashes caused by uncaught exceptions were caused by RuntimeExceptions, most of
such exceptions y\% were caused by faults on the application itself, and
approximately z\% were caused by library code.


\end{abstract}

%\IEEEpeerreviewmaketitle

\section{Introduction}

The pervasiveness of the World Wide Web and the astonishing increase in the
number of smartphones have stimulated the creation of a new class of
applications which extend the phones capabilities far beyond of the basic calls
and textual messages. Such applications run over one or more platforms, the
currently most used platforms are iOS, BlackBerry and Android. Among these, the
Android platform leads the smartphone market, comprising around XXXX, thanks to
hardware partners like Samsung, HTC, Motorola, and Asus (besides Nexus it own
device). (ref:
http://techcrunch.com/2012/09/26/google-play-store-25-billion-app-downloads/).
In 2011 approximately 550,000 Android smartphones were activated per day
[ref-34-repacked].].  

There are several app stores, also called markets, where users can download the
mobile apps. Google Play Market, the most used market for Android apps, was
released only 2 years ago and already passed 48 billion app downloads, with more
than 2.5 billion downloads in a single month in 2013. [ref:
http://officialandroid.blogspot.nl/]. Considering the distribution of downloads
for all apps, the free apps represent more than 60\% of all downloads.
[refhttp://www.appbrain.com/stats/free-and-paid-android-applications]. 


Yet, no study has investigated the extent and the main causes of such crashes in
practice. Although some APIs and tools are available to help the developer keep
track of the crashes,happening on user devices
(e.g.~\cite{BugSe14,BugSn14,Googl14,Acra14}) all of them only enable a
per-application crash analysis, providing  reports focusing on a single
application at a time - and last but not least the crash reports are only shown
to app developers are not open. 


The more we come to depend on mobile apps for taking care of business, the
greater the need for reliability. [REF-DEPO2].  We believe that in-depth
cross-project analysis of the crash causes of a broader set of apps is useful in
the sense that…

Since the real crash logs are not available for analysis, the closer we can get
from the causes of failures of mobile crashes are the open source repositories
that host not only the code of mobile apps but also the open issues related to
features and defects on such apps. The open source Android apps often use the
open source repositories such as Github and Googlecode for source code
management and also for issue reporting (for developers and users). For instance
K9Mail …. Million usuers ….. asks  often use the repository issues to report
bugs. For instance

In this work we implemented a Repository Mining Tool to perform an in-depth
analysis of exception traces reported on Google Code and GitHub on issues. Such
tool distill interesting information from stack traces and make such information
available in a structured way to further analysis.

Such study aimed at performing an in-depth analysis of the stack traces ….

this work provides tool Infrastructure which can also help the developer to
evaluate whether an app’s own code has caused it to crash or whether a third
party service SDK being used is causing the problem.

\subsection{Problem Statement}

Yet, no study has investigated the extent and the main causes of such crashes.
Although some APIs and tools are available to help the developer keep track of
the crashes happening on user devices~\cite{BugSe14,BugSn14,Googl14,Acra14}, 
all of them only enable a per-application crash analysis, providing interesting 
reports but focusing on a single application at a time. Hence, an in-depth analysis 
of the crash causes of a broader set of apps is needed.  Additional motivation:  
569 results for ``android crashes'' in product forums; look at stackoverflow


\section{Background}

\subsection{Error handling in various programming languages}

\begin{itemize}

    \item Return codes
    \item Exceptions
    \item Monads

\end{itemize}

\subsection{Exception handling in Java}

What makes exceptions in Java unique

\begin{itemize}

    \item Exceptions as part of method signature
    \item The Java exception hierarchy
    \item 

\end{itemize}

\section{Study design}

In this section we present the target repository and systems used in out study
as well as the approach followed to extract the data analyzed here.  

%\subsection{Research Goals}

%This work aims at finding answers to the following research questions: 
%RG1-What are the main causes of mobile app crashes? RG2-What can be done to mitigate 
%such crashes? <RE-WRITE>

\subsection{Method}

Phase 2: Repository Mining Implement a repository mining tool in order to
distill the information of stack traces sent to GitHub or GoogleCode bug report
repositories. Such analysis may reveal for instance that: which libraries are
largely reused by mobile apps and are causing the crashes; or even may reveal
whether usability or backward compatibility issues of Android API are causing
faults.  Phase 2: Crash Mitigation Approaches <to discuss> Based on the main
causes of crashes (revealed during the study) we are going to propose a tool
aiming at checking the exception handling behavior of Android Apps. This tool
will be based on previous works developed by the principal investigator of this
proposal: (i) VITTAE~\cite{Di-Be11} a tool that extends JUnit capability to
enable the testing of exception handling behavior (going beyond the checking of
exception triggering capabilities provided by JUnit); and PLEA~\cite{Coelh11} a
tool that statically discovers that exception flows of a program. Since PLEA is
based on the analysis of Java bytecode and cannot be directly applied to Dalvik
format. In this work we intend to use one of the tools available to retarget
Dalvik to Java bytecode, e.g. Dare~\cite{Octea12}. Moreover, also depending on
the results of crash repository mining study this work can also propose a set of
development practices and guidelines to prevent/mitigate the number of crashes.

\subsection{The Target Repositories}

The open source Android projects often use the open source repository also as a
bug reporting tool for developers and users. For instance K9Mail …. Million
usuers ….. asks  often use the repository issues to report bugs. For instance

\subsubsection{Github Applications}
\subsubsection{GoogleCode Applications}

\subsection{The Data Extraction Process} 
\subsection{Database of Exceptional Issues}
\subsection{Database of Exceptional Issues}

\section{Results}

\section{Analyzing Collected Data}

The goal of this study was to get an initial view of what is the extent of the
mobile crashes problem through the ``partial view'' acquired by the analysis of
the issues reported on the opensource repositories.

\subsection{What are the most ``popular'' exceptions and what they can tell us?}

Most of the crashs reported on issues they are BUGS, they do not represent
exceptional scenarios. <to complete>.


\subsection{Which elements are triggering most of the exceptions and what they can tell us about the exception structure?}

\subsection{Inferring the library code from cross-application analysis}

\subsection{What is the role of libraries and the underlying platform on crashes?}

\subsection{What is the role of the application itself on crashes?}

\subsection{The rules of using checked and unchecked exceptions are being obeyed in mobile environment?}


There are some guidelines to guide the design of the exception handling
solution/structure of a system [effective][bertrand]. checked exceptions should
be used to represent anticipated problems for which a handler can be defined. On
the other hand….

\begin{itemize}
  
  \item  <THE JAVA CHECKED EXCEPTIOSN ARE NOT USED AS THE JAVA DESIGNERS THOUGHT
    THEY SHOULD BE (strange wrappings). Not used as intended…>

  \item Find out why Runtime exceptions are used: mimicking C\#? Ad hoc use of
    runtime to get rid of checked…?

\end{itemize}

\section{Cross-projects crash graphs}

\section{Discussion}

\subsection{Runtime or Checked Exceptions? A matter of taste or concern about robustness?}

Our first preliminary findings points to <to complete>…..

Developers lack of understanding the difference between Checked and Unchecked.

\subsection{Exception Handling Bugs and Tool Support}

A better support to understand and prevent such bugs is needed. Our works is
just a first step in de direction\ldots

\subsection{How can the developers protect their apps from crashing?}

A better support to understand and prevent such bugs is needed. Our works is
just a first step in de direction\ldots

$<$ Callbacks $\times$ Exception Handling. $>$ 

$<$ several windows and the default handler\ldots which apps are really using
it? $>$

\section{Threats to Validity}

\subsection{Access to Crash Logs}
\subsection{Data Extraction from Natural language Artifacts}
\subsection{Construction, Internal and External Threats}

WHY ANDROID? ALL APS SHARE THE SAME FRAMEWORK. We chose to analyze mobile apps
as a first step\ldots as they share a single framework, they are IO intensive
applications\ldots. They can access internet resources (e.g. services)\ldots

\section{Related Work}

Ruiz et al.~\cite{Ruiz12} investigated the degree of reuse across applications
in Android Market, the study showed that almost 23\% of the classes inherited
from a base class in the Android API, and that 217 mobile apps were reused
completely by another mobile app. Pathak et al.~\cite{Patha11} analyzed bug
reports and developers discussions of Android platform and found out that
approximately 20\% of energy-related bugs in Android occurred after an OS
update. McDonnell et al.~\cite{McDon13} conducted a case study of the
co-evolution behavior of Android API and 10 dependent applications using the
version history data found in github. The study found that approximately 25\% of
all methods in the client code used the Android API, and that the methods
reusing fast-evolving APIs were more defect prone then others. Vásquez et
al.~\cite{Linar13} analyzed approximately 7K free Android apps and observed that
the last successful apps used Android APIs that were on average 300\% more
change-prone than the APIs used by the most successful apps. Pingyu and
Elbaum~\cite{Zhang12} analyzed bug reports of 5 Android applications an observed
that 29\% had to do with poor exceptional handling code.  Our work differs from
the others as it aims at distilling the information of bug reports describing
uncaught exceptions created for mobile applications in Github and Googlecode, in
order to get a first view of what is causing the crashes across applications
available and what the characteristics of the stack traces can tell us about the
exception structure of those applications. Moreover this work\ldots.

\section{Related Work}

Services for collecting exceptions~\cite{BugSe14,BugSn14,Googl14,Acra14}, 

\section{Conclusion}
The conclusion goes here.

\section*{Acknowledgment}
This work is partially supported by the NWO TestRoots project (639.022.314).


\bibliographystyle{IEEEtran}
\bibliography{android-stacks}


% that's all folks
\end{document}


